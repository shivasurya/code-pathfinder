#!/usr/bin/env node

/*
 * SecureFlow CLI (scaffold)
 * This is a minimal, non-breaking CLI entry that will evolve to reuse extension logic via adapters.
 */

const { Command } = require('commander');
const { yellow, red, cyan } = require('colorette');
const pkg = require('../package.json');
const { getMaskedConfig, loadConfig, CONFIG_FILE } = require('../lib/config');
const { CLIProfileCommand } = require('../profiler');

const program = new Command();

program
  .name('secureflow')
  .description('SecureFlow CLI — security analysis for codebases (scaffold)')
  .version(pkg.version);

program
  .command('scan')
  .description('Scan code for issues (placeholder)')
  .option('--file <path>', 'File to scan')
  .option('--range <start:end>', 'Line range, e.g. 10:50')
  .option('--format <format>', 'Output format: json|text', 'text')
  .action((opts) => {
    console.log(yellow('SecureFlow CLI scaffold'));
    console.log('This command is a placeholder and will be implemented in upcoming PRs.');
    if (opts.file) console.log('file:', opts.file);
    if (opts.range) console.log('range:', opts.range);
    console.log('format:', opts.format);
    process.exitCode = 0;
  });

program
  .command('profile')
  .description('Profile project to identify application types and technologies')
  .argument('[path]', 'Path to project directory (defaults to current directory)', '.')
  .option('--model <model>', 'AI model to use for analysis')
  .option('--format <format>', 'Output format: text|json', 'text')
  .option('--output <file>', 'Save results to file')
  .action(async (projectPath, options) => {
    try {
      const profileCommand = new CLIProfileCommand({
        selectedModel: options.model
      });
      await profileCommand.execute(projectPath, options);
    } catch (error) {
      console.error(red('❌ Profile command failed:'));
      console.error(error.message);
      if (process.env.DEBUG) {
        console.error(error.stack);
      }
      process.exit(1);
    }
  });

program
  .command('config')
  .description('Show CLI configuration (masked by default)')
  .option('--show', 'Show configuration summary', false)
  .option('--raw', 'Do not mask secrets (use with caution)', false)
  .action((opts) => {
    if (!opts.show) {
      console.log('Use --show to display the configuration.');
      console.log(`Config file path: ${CONFIG_FILE}`);
      process.exitCode = 0;
      return;
    }

    const cfg = opts.raw ? loadConfig() : getMaskedConfig();
    console.log(cyan('SecureFlow CLI configuration'));
    console.log(JSON.stringify(cfg, null, 2));
    process.exitCode = 0;
  });

program
  .command('helpall')
  .description('Show help for all commands')
  .action(() => {
    program.commands.forEach((c) => c.outputHelp());
  });

program.parseAsync(process.argv).catch((err) => {
  console.error(red('[secureflow] fatal error'));
  console.error(err?.stack || err?.message || String(err));
  process.exit(1);
});
