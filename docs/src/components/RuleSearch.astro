---
interface Props {
  placeholder?: string;
}

const { placeholder = "Search rules..." } = Astro.props;
---

<div class="rule-search">
  <div class="search-wrapper">
    <svg class="search-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <circle cx="11" cy="11" r="8"></circle>
      <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
    </svg>
    <input 
      type="search" 
      placeholder={placeholder}
      class="search-input"
      aria-label="Search rules"
    />
  </div>
  <div class="search-tags">
    <button class="tag" data-severity="critical">Critical</button>
    <button class="tag" data-severity="high">High</button>
    <button class="tag" data-type="security">Security</button>
    <button class="tag" data-type="quality">Quality</button>
  </div>
</div>

<style>
  .rule-search {
    margin-bottom: 2rem;
    width: 100%;
  }

  .search-wrapper {
    position: relative;
    width: 100%;
  }

  .search-icon {
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    color: var(--sl-color-gray-3);
    pointer-events: none;
  }

  .search-input {
    width: 100%;
    padding: 0.875rem 1rem 0.875rem 3rem;
    border: 2px solid var(--sl-color-gray-5);
    border-radius: 0.75rem;
    background: var(--sl-color-bg);
    color: var(--sl-color-text);
    font-size: 1rem;
    transition: all 0.2s ease;
  }

  .search-input:focus {
    outline: none;
    border-color: var(--sl-color-accent);
    box-shadow: 0 0 0 3px rgb(var(--sl-color-accent) / 0.2);
  }

  .search-input::placeholder {
    color: var(--sl-color-gray-3);
  }

  .search-tags {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
    margin-top: 0.75rem;
  }

  .tag {
    padding: 0.375rem 0.875rem;
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 1rem;
    background: var(--sl-color-bg);
    color: var(--sl-color-text);
    font-size: 0.875rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .tag:hover {
    background: var(--sl-color-gray-6);
    border-color: var(--sl-color-gray-4);
  }

  .tag[data-severity="critical"] {
    border-color: rgb(var(--sl-color-red));
    color: rgb(var(--sl-color-red));
  }

  .tag[data-severity="high"] {
    border-color: rgb(var(--sl-color-orange));
    color: rgb(var(--sl-color-orange));
  }

  .tag[data-type="security"] {
    border-color: rgb(var(--sl-color-blue));
    color: rgb(var(--sl-color-blue));
  }

  .tag[data-type="quality"] {
    border-color: rgb(var(--sl-color-green));
    color: rgb(var(--sl-color-green));
  }

  /* Active state for tags */
  .tag[aria-pressed="true"] {
    background: var(--sl-color-accent);
    border-color: var(--sl-color-accent);
    color: var(--sl-color-white);
  }

  /* Hide filtered cards */
  :global(.rule-card.hidden) {
    display: none;
  }
</style>

<script>
  function setupRuleSearch() {
    const searchInput = document.querySelector('.search-input') as HTMLInputElement;
    const tags = document.querySelectorAll('.tag');
    const cards = document.querySelectorAll('.rule-card');
    
    function filterCards() {
      const searchTerm = searchInput?.value.toLowerCase() || '';
      const activeTags = Array.from(tags)
        .filter(tag => tag.getAttribute('aria-pressed') === 'true')
        .map(tag => ({
          type: tag.getAttribute('data-type'),
          severity: tag.getAttribute('data-severity')
        }));

      cards.forEach(card => {
        const title = card.querySelector('.title')?.textContent?.toLowerCase() || '';
        const description = card.querySelector('.description')?.textContent?.toLowerCase() || '';
        const severity = card.getAttribute('data-severity');
        const type = card.getAttribute('data-type');

        const matchesSearch = searchTerm === '' || 
          title.includes(searchTerm) || 
          description.includes(searchTerm);

        const matchesTags = activeTags.length === 0 || 
          activeTags.some(tag => 
            (tag.severity === severity) || (tag.type === type)
          );

        card.classList.toggle('hidden', !matchesSearch || !matchesTags);
      });
    }

    // Toggle tag selection
    tags.forEach(tag => {
      tag.addEventListener('click', () => {
        const isPressed = tag.getAttribute('aria-pressed') === 'true';
        tag.setAttribute('aria-pressed', (!isPressed).toString());
        filterCards();
      });
    });

    // Handle search input
    if (searchInput) {
      searchInput.addEventListener('input', filterCards);
    }
  }

  // Setup on initial load
  setupRuleSearch();

  // Setup on client-side navigation
  document.addEventListener('astro:page-load', setupRuleSearch);
</script>
