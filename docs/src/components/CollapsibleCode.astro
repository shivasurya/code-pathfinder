---
import Code from './Code.astro';

interface CodeTab {
  label: string;
  code: string;
  lang: string;
  marks?: string[];
}

interface Props {
  tabs: CodeTab[];
}

const { tabs } = Astro.props;
const [firstTab] = tabs;
const exampleTab = tabs.find(tab => tab.label === 'Example');
---

<div class="collapsible-code">
  <button class="code-toggle" aria-expanded="false">
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="toggle-icon">
      <path d="M6 9l6 6 6-6"/>
    </svg>
    <span>View Code</span>
  </button>
  <div class="code-content" hidden>
    <div class="code-tabs">
      <div class="tab-header not-content">
        <div class="tab-buttons">
          {tabs.map((tab, index) => (
            <button 
              class="tab-button not-content" 
              data-tab-index={index}
              aria-selected={index === 0}
            >
              {tab.label}
            </button>
          ))}
        </div>
        {tabs[0].label === "Example" && (
          <button class="run-button not-content" data-code={tabs[0].code} data-rule={tabs[1]?.code}>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <polygon points="5 3 19 12 5 21 5 3"></polygon>
            </svg>
            Run
          </button>
        )}
      </div>
      <div class="tab-panels">
        {tabs.map((tab, index) => (
          <div 
            class="tab-panel" 
            data-tab-index={index}
            hidden={index !== 0}
          >
            <Code 
              code={tab.code} 
              lang={tab.lang} 
              mark={tab.marks} 
              highlights={tab.label === 'Example' ? [] : undefined}
            />
          </div>
        ))}
      </div>
    </div>
  </div>
</div>

<style>
  .collapsible-code {
    margin: 1rem 0;
  }

  .code-toggle {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 0.5rem;
    background: var(--sl-color-gray-6);
    color: var(--sl-color-gray-2);
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .code-toggle:hover {
    background: var(--sl-color-gray-5);
    border-color: var(--sl-color-gray-4);
  }

  .toggle-icon {
    transition: transform 0.2s ease;
  }

  .code-toggle[aria-expanded="true"] .toggle-icon {
    transform: rotate(180deg);
  }

  .code-content {
    margin-top: 0.5rem;
  }

  .code-content[hidden] {
    display: none;
  }

  .code-tabs {
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 0.5rem;
    overflow: hidden;
  }

  .tab-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: var(--sl-color-bg-sidebar);
    border-bottom: 1px solid var(--sl-color-gray-5);
    padding-right: 0.5rem;
  }

  .tab-buttons {
    display: flex;
    border-bottom: 1px solid transparent;
  }

  .tab-button {
    padding: 0.75rem 1.25rem;
    border: none;
    background: none;
    color: var(--sl-color-gray-2);
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
  }

  .tab-button[aria-selected="true"] {
    color: var(--sl-color-text);
    background: var(--sl-color-bg);
  }

  .tab-button[aria-selected="true"]::after {
    content: '';
    position: absolute;
    bottom: -1px;
    left: 0;
    right: 0;
    height: 2px;
    background: var(--sl-color-accent);
  }

  .tab-button:hover {
    color: var(--sl-color-text);
  }

  .run-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border: 1px solid var(--sl-color-accent);
    border-radius: 0.25rem;
    background: var(--sl-color-accent);
    color: var(--sl-color-white);
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .run-button:hover {
    background: var(--sl-color-accent-high);
  }

  .tab-panel[hidden] {
    display: none;
  }
</style>

<script>
  // Store event handlers for cleanup
  const eventHandlers = new WeakMap();

  function setupCollapsibleCode() {
    const toggles = document.querySelectorAll('.code-toggle');
    const tabButtons = document.querySelectorAll('.tab-button');
    const runButtons = document.querySelectorAll('.run-button');
    
    // Clean up existing handlers
    function cleanupHandlers(elements) {
      elements.forEach(el => {
        const handlers = eventHandlers.get(el);
        if (handlers) {
          handlers.forEach(({ event, handler }) => {
            el.removeEventListener(event, handler);
          });
          eventHandlers.delete(el);
        }
      });
    }

    cleanupHandlers(toggles);
    cleanupHandlers(tabButtons);
    cleanupHandlers(runButtons);

    // Helper to store event handlers
    function addHandler(element, event, handler) {
      element.addEventListener(event, handler);
      const handlers = eventHandlers.get(element) || [];
      handlers.push({ event, handler });
      eventHandlers.set(element, handlers);
    }

    toggles.forEach(toggle => {
      const toggleHandler = () => {
        const isExpanded = toggle.getAttribute('aria-expanded') === 'true';
        const content = toggle.nextElementSibling;
        
        toggle.setAttribute('aria-expanded', !isExpanded);
        content.hidden = isExpanded;
      };
      addHandler(toggle, 'click', toggleHandler);
    });

    tabButtons.forEach(button => {
      const tabHandler = () => {
        const tabIndex = button.dataset.tabIndex;
        const tabsContainer = button.closest('.code-tabs');
        const allButtons = tabsContainer.querySelectorAll('.tab-button');
        const allPanels = tabsContainer.querySelectorAll('.tab-panel');

        allButtons.forEach(btn => btn.setAttribute('aria-selected', 'false'));
        allPanels.forEach(panel => panel.hidden = true);

        button.setAttribute('aria-selected', 'true');
        tabsContainer.querySelector(`.tab-panel[data-tab-index="${tabIndex}"]`).hidden = false;
      };
      addHandler(button, 'click', tabHandler);
    });

    runButtons.forEach(button => {
      const runHandler = async () => {
        const code = button.dataset.code;
        const rule = button.dataset.rule;
        
        try {
          button.disabled = true;
          button.innerHTML = '<svg class="spin" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="2" x2="12" y2="6"></line><line x1="12" y1="18" x2="12" y2="22"></line><line x1="4.93" y1="4.93" x2="7.76" y2="7.76"></line><line x1="16.24" y1="16.24" x2="19.07" y2="19.07"></line><line x1="2" y1="12" x2="6" y2="12"></line><line x1="18" y1="12" x2="22" y2="12"></line><line x1="4.93" y1="19.07" x2="7.76" y2="16.24"></line><line x1="16.24" y1="7.76" x2="19.07" y2="4.93"></line></svg> Running...';
          
          const response = await fetch('http://localhost:8080/api/analyze', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              javaSource: code,
              query: rule
            })
          });

          if (!response.ok) {
            throw new Error('Failed to run query');
          }

          const data = await response.json();
          console.log('Query result:', data);
          
          // Update code block with highlights
          const tabPanel = button.closest('.tab-header').nextElementSibling.querySelector('.tab-panel:not([hidden])');
          const editor = tabPanel?.querySelector('.editor');
          if (editor && window.highlightCodeLines) {
            window.highlightCodeLines(editor, data.results);
          }

          button.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polygon points="5 3 19 12 5 21 5 3"></polygon></svg> Run';
          button.disabled = false;
        } catch (error) {
          console.error('Error running query:', error);
          button.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg> Error';
        } finally {
          setTimeout(() => {
            button.disabled = false;
            button.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polygon points="5 3 19 12 5 21 5 3"></polygon></svg> Run';
          }, 2000);
        }
      };
      addHandler(button, 'click', runHandler);
    });
  }

  // Setup on initial load
  setupCollapsibleCode();

  // Setup on client-side navigation
  document.addEventListener('astro:page-load', setupCollapsibleCode);
</script>

<style is:global>
  .spin {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    100% {
      transform: rotate(360deg);
    }
  }
</style>
</script>
